// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  OFFICER
  PENDING
}

enum Gender {
  MALE
  FEMALE
}

enum SavingsType {
  MANDATORY
  VOLUNTARY
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  LOAN_DISBURSEMENT
  LOAN_PAYMENT
}

enum LoanStatus {
  PENDING
  APPROVED
  ACTIVE
  COMPLETED
  REJECTED
}

enum LoanType {
  REGULAR
  EMERGENCY
  BUSINESS
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          ROLE      @default(PENDING)
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model MemberType {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   Member[]

  @@map("member_type")
}

model Member {
  id           String    @id @default(uuid())
  memberNo     String    @unique
  name         String
  address      String?
  gender       Gender
  nationalId   String?
  birthPlace   String?
  birthDate    DateTime?
  phone        String?
  registerDate DateTime  @default(now())
  job          String?
  isActive     Boolean   @default(true)

  memberTypeId String
  memberType   MemberType @relation(fields: [memberTypeId], references: [id])

  // relations
  savingsAccounts SavingsAccount[]
  loans           Loan[]
  transactions    Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("member")
}

model SavingsAccount {
  id          String      @id @default(uuid())
  accountNo   String      @unique
  savingsType SavingsType
  balance     Decimal     @default(0) @db.Decimal(15, 2)
  isActive    Boolean     @default(true)

  memberId String
  member   Member @relation(fields: [memberId], references: [id])

  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("savings_account")
}

model Loan {
  id                 String     @id @default(uuid())
  loanNo             String     @unique
  loanType           LoanType
  principalAmount    Decimal    @db.Decimal(15, 2)
  interestRate       Decimal    @db.Decimal(5, 4)
  loanTerm           Int
  monthlyPayment     Decimal    @db.Decimal(15, 2)
  outstandingBalance Decimal    @db.Decimal(15, 2)
  status             LoanStatus @default(PENDING)
  purpose            String?

  applicationDate  DateTime  @default(now())
  approvalDate     DateTime?
  disbursementDate DateTime?

  memberId String
  member   Member @relation(fields: [memberId], references: [id])

  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("loan")
}

model Transaction {
  id              String          @id @default(uuid())
  transactionNo   String          @unique
  type            TransactionType
  amount          Decimal         @db.Decimal(15, 2)
  balanceBefore   Decimal?        @db.Decimal(15, 2)
  balanceAfter    Decimal?        @db.Decimal(15, 2)
  description     String?
  transactionDate DateTime        @default(now())

  memberId String
  member   Member @relation(fields: [memberId], references: [id])

  // savings / loan
  savingsAccountId String?
  savingsAccount   SavingsAccount? @relation(fields: [savingsAccountId], references: [id])

  loanId String?
  loan   Loan?   @relation(fields: [loanId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transaction")
}
